// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	types "github.com/CosmWasm/cosmwasm-go/std/types"
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(in *jlexer.Lexer, out *Permissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegate":
			out.Delegate = bool(in.Bool())
		case "redelegate":
			out.Redelegate = bool(in.Bool())
		case "undelegate":
			out.Undelegate = bool(in.Bool())
		case "withdraw":
			out.Withdraw = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(out *jwriter.Writer, in Permissions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegate\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Delegate))
	}
	{
		const prefix string = ",\"redelegate\":"
		out.RawString(prefix)
		out.Bool(bool(in.Redelegate))
	}
	{
		const prefix string = ",\"undelegate\":"
		out.RawString(prefix)
		out.Bool(bool(in.Undelegate))
	}
	{
		const prefix string = ",\"withdraw\":"
		out.RawString(prefix)
		out.Bool(bool(in.Withdraw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permissions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Permissions) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permissions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Permissions) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(l, v)
}
func tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(in *jlexer.Lexer, out *ContractInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(out *jwriter.Writer, in ContractInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ContractInfo) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ContractInfo) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(l, v)
}
func tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(in *jlexer.Lexer, out *BigMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keys":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Keys = make(map[string][]uint8)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []uint8
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						v1 = in.Bytes()
					}
					(out.Keys)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(out *jwriter.Writer, in BigMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keys\":"
		out.RawString(prefix[1:])
		if in.Keys == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Keys {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.Base64Bytes(v3Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BigMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BigMap) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BigMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BigMap) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(l, v)
}
func tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(in *jlexer.Lexer, out *Allowances) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "native_balance":
			tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(in, &out.Balance)
		case "expiration":
			tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(in, &out.Expires)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(out *jwriter.Writer, in Allowances) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"native_balance\":"
		out.RawString(prefix[1:])
		tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(out, in.Balance)
	}
	{
		const prefix string = ",\"expiration\":"
		out.RawString(prefix)
		tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(out, in.Expires)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Allowances) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Allowances) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Allowances) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Allowances) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(l, v)
}
func tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(in *jlexer.Lexer, out *Expiration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "at_height":
			out.AtHeight = uint64(in.Uint64())
		case "at_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AtTime).UnmarshalJSON(data))
			}
		case "never":
			out.Never = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(out *jwriter.Writer, in Expiration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"at_height\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AtHeight))
	}
	{
		const prefix string = ",\"at_time\":"
		out.RawString(prefix)
		out.Raw((in.AtTime).MarshalJSON())
	}
	{
		const prefix string = ",\"never\":"
		out.RawString(prefix)
		out.Bool(bool(in.Never))
	}
	out.RawByte('}')
}
func tinyjson4e1b3cc1DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(in *jlexer.Lexer, out *NativeBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coins":
			if in.IsNull() {
				in.Skip()
				out.Coins = nil
			} else {
				in.Delim('[')
				if out.Coins == nil {
					if !in.IsDelim(']') {
						out.Coins = make([]types.Coin, 0, 2)
					} else {
						out.Coins = []types.Coin{}
					}
				} else {
					out.Coins = (out.Coins)[:0]
				}
				for !in.IsDelim(']') {
					var v6 types.Coin
					(v6).UnmarshalTinyJSON(in)
					out.Coins = append(out.Coins, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson4e1b3cc1EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(out *jwriter.Writer, in NativeBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coins\":"
		out.RawString(prefix[1:])
		if in.Coins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Coins {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
