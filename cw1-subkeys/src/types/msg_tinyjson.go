// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	types1 "github.com/CosmWasm/cosmwasm-go/std/types"
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
	types "github.com/JackalLabs/burrow-contracts/cw1-whitelist/src/types"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(in *jlexer.Lexer, out *UpdateAdminsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]string, 0, 4)
					} else {
						out.Admins = []string{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Admins = append(out.Admins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(out *jwriter.Writer, in UpdateAdminsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Admins) != 0 {
		const prefix string = ",\"admins\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Admins {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateAdminsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UpdateAdminsRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateAdminsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UpdateAdminsRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(in *jlexer.Lexer, out *SetPermissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		case "permissions":
			tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(in, &out.Permissions)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(out *jwriter.Writer, in SetPermissions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spender\":"
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(out, in.Permissions)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPermissions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v SetPermissions) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPermissions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *SetPermissions) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes1(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(in *jlexer.Lexer, out *Permissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delegate":
			out.Delegate = bool(in.Bool())
		case "redelegate":
			out.Redelegate = bool(in.Bool())
		case "undelegate":
			out.Undelegate = bool(in.Bool())
		case "withdraw":
			out.Withdraw = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(out *jwriter.Writer, in Permissions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delegate\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Delegate))
	}
	{
		const prefix string = ",\"redelegate\":"
		out.RawString(prefix)
		out.Bool(bool(in.Redelegate))
	}
	{
		const prefix string = ",\"undelegate\":"
		out.RawString(prefix)
		out.Bool(bool(in.Undelegate))
	}
	{
		const prefix string = ",\"withdraw\":"
		out.RawString(prefix)
		out.Bool(bool(in.Withdraw))
	}
	out.RawByte('}')
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(in *jlexer.Lexer, out *QueryPermissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(out *jwriter.Writer, in QueryPermissions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spender != "" {
		const prefix string = ",\"spender\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryPermissions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryPermissions) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryPermissions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryPermissions) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes3(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(in *jlexer.Lexer, out *QueryMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_list":
			if in.IsNull() {
				in.Skip()
				out.QueryAdminListRequest = nil
			} else {
				if out.QueryAdminListRequest == nil {
					out.QueryAdminListRequest = new(types.QueryAdminListRequest)
				}
				(*out.QueryAdminListRequest).UnmarshalTinyJSON(in)
			}
		case "can_execute":
			if in.IsNull() {
				in.Skip()
				out.QueryCanExecuteRequest = nil
			} else {
				if out.QueryCanExecuteRequest == nil {
					out.QueryCanExecuteRequest = new(QueryCanExecuteRequest)
				}
				(*out.QueryCanExecuteRequest).UnmarshalTinyJSON(in)
			}
		case "allowance":
			if in.IsNull() {
				in.Skip()
				out.QueryAllowance = nil
			} else {
				if out.QueryAllowance == nil {
					out.QueryAllowance = new(QueryAllowance)
				}
				(*out.QueryAllowance).UnmarshalTinyJSON(in)
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.QueryPermissions = nil
			} else {
				if out.QueryPermissions == nil {
					out.QueryPermissions = new(QueryPermissions)
				}
				(*out.QueryPermissions).UnmarshalTinyJSON(in)
			}
		case "all_allowance":
			if in.IsNull() {
				in.Skip()
				out.QueryAllAllowance = nil
			} else {
				if out.QueryAllAllowance == nil {
					out.QueryAllAllowance = new(QueryAllAllowance)
				}
				(*out.QueryAllAllowance).UnmarshalTinyJSON(in)
			}
		case "all_permissions":
			if in.IsNull() {
				in.Skip()
				out.QueryAllPermissions = nil
			} else {
				if out.QueryAllPermissions == nil {
					out.QueryAllPermissions = new(QueryAllPermissions)
				}
				(*out.QueryAllPermissions).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(out *jwriter.Writer, in QueryMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.QueryAdminListRequest != nil {
		const prefix string = ",\"admin_list\":"
		first = false
		out.RawString(prefix[1:])
		(*in.QueryAdminListRequest).MarshalTinyJSON(out)
	}
	if in.QueryCanExecuteRequest != nil {
		const prefix string = ",\"can_execute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QueryCanExecuteRequest).MarshalTinyJSON(out)
	}
	if in.QueryAllowance != nil {
		const prefix string = ",\"allowance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QueryAllowance).MarshalTinyJSON(out)
	}
	if in.QueryPermissions != nil {
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QueryPermissions).MarshalTinyJSON(out)
	}
	if in.QueryAllAllowance != nil {
		const prefix string = ",\"all_allowance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QueryAllAllowance).MarshalTinyJSON(out)
	}
	if in.QueryAllPermissions != nil {
		const prefix string = ",\"all_permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QueryAllPermissions).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes4(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(in *jlexer.Lexer, out *QueryCanExecuteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender":
			out.Sender = string(in.String())
		case "msg":
			(out.Msg).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(out *jwriter.Writer, in QueryCanExecuteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sender != "" {
		const prefix string = ",\"sender\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Sender))
	}
	if true {
		const prefix string = ",\"msg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Msg).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryCanExecuteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryCanExecuteRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryCanExecuteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryCanExecuteRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes5(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes6(in *jlexer.Lexer, out *QueryAllowance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes6(out *jwriter.Writer, in QueryAllowance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Spender != "" {
		const prefix string = ",\"spender\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryAllowance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryAllowance) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryAllowance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryAllowance) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes6(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes7(in *jlexer.Lexer, out *QueryAllPermissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start_after":
			out.StartAfter = string(in.String())
		case "limit":
			out.Limit = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes7(out *jwriter.Writer, in QueryAllPermissions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartAfter != "" {
		const prefix string = ",\"start_after\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.StartAfter))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryAllPermissions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryAllPermissions) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryAllPermissions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryAllPermissions) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes7(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes8(in *jlexer.Lexer, out *QueryAllAllowance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start_after":
			out.StartAfter = string(in.String())
		case "limit":
			out.Limit = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes8(out *jwriter.Writer, in QueryAllAllowance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartAfter != "" {
		const prefix string = ",\"start_after\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.StartAfter))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryAllAllowance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryAllAllowance) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryAllAllowance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryAllAllowance) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes8(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes9(in *jlexer.Lexer, out *PermissionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		case "permissions":
			tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(in, &out.Permissions)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes9(out *jwriter.Writer, in PermissionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spender\":"
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes2(out, in.Permissions)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PermissionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v PermissionInfo) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PermissionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *PermissionInfo) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes9(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes10(in *jlexer.Lexer, out *IncreaseAllowance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		case "expires":
			tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(in, &out.Expires)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes10(out *jwriter.Writer, in IncreaseAllowance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spender\":"
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(out, in.Expires)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncreaseAllowance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v IncreaseAllowance) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncreaseAllowance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *IncreaseAllowance) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes10(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(in *jlexer.Lexer, out *Expiration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "at_height":
			out.AtHeight = uint64(in.Uint64())
		case "at_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AtTime).UnmarshalJSON(data))
			}
		case "never":
			out.Never = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(out *jwriter.Writer, in Expiration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"at_height\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AtHeight))
	}
	{
		const prefix string = ",\"at_time\":"
		out.RawString(prefix)
		out.Raw((in.AtTime).MarshalJSON())
	}
	{
		const prefix string = ",\"never\":"
		out.RawString(prefix)
		out.Bool(bool(in.Never))
	}
	out.RawByte('}')
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes12(in *jlexer.Lexer, out *ExecuteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgs":
			if in.IsNull() {
				in.Skip()
				out.Msgs = nil
			} else {
				in.Delim('[')
				if out.Msgs == nil {
					if !in.IsDelim(']') {
						out.Msgs = make([]types1.CosmosMsg, 0, 0)
					} else {
						out.Msgs = []types1.CosmosMsg{}
					}
				} else {
					out.Msgs = (out.Msgs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 types1.CosmosMsg
					(v4).UnmarshalTinyJSON(in)
					out.Msgs = append(out.Msgs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes12(out *jwriter.Writer, in ExecuteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Msgs) != 0 {
		const prefix string = ",\"msgs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Msgs {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ExecuteRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes12(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ExecuteRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes12(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes13(in *jlexer.Lexer, out *ExecuteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execute":
			if in.IsNull() {
				in.Skip()
				out.ExecuteRequest = nil
			} else {
				if out.ExecuteRequest == nil {
					out.ExecuteRequest = new(ExecuteRequest)
				}
				(*out.ExecuteRequest).UnmarshalTinyJSON(in)
			}
		case "freeze":
			if in.IsNull() {
				in.Skip()
				out.FreezeRequest = nil
			} else {
				if out.FreezeRequest == nil {
					out.FreezeRequest = new(types.FreezeRequest)
				}
				(*out.FreezeRequest).UnmarshalTinyJSON(in)
			}
		case "update_admins":
			if in.IsNull() {
				in.Skip()
				out.UpdateAdminsRequest = nil
			} else {
				if out.UpdateAdminsRequest == nil {
					out.UpdateAdminsRequest = new(types.UpdateAdminsRequest)
				}
				(*out.UpdateAdminsRequest).UnmarshalTinyJSON(in)
			}
		case "increase_allowance":
			if in.IsNull() {
				in.Skip()
				out.IncreaseAllowance = nil
			} else {
				if out.IncreaseAllowance == nil {
					out.IncreaseAllowance = new(IncreaseAllowance)
				}
				(*out.IncreaseAllowance).UnmarshalTinyJSON(in)
			}
		case "decrease_allowance":
			if in.IsNull() {
				in.Skip()
				out.DecreaseAllowance = nil
			} else {
				if out.DecreaseAllowance == nil {
					out.DecreaseAllowance = new(DecreaseAllowance)
				}
				(*out.DecreaseAllowance).UnmarshalTinyJSON(in)
			}
		case "set_permissions":
			if in.IsNull() {
				in.Skip()
				out.SetPermissions = nil
			} else {
				if out.SetPermissions == nil {
					out.SetPermissions = new(SetPermissions)
				}
				(*out.SetPermissions).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes13(out *jwriter.Writer, in ExecuteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ExecuteRequest != nil {
		const prefix string = ",\"execute\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ExecuteRequest).MarshalTinyJSON(out)
	}
	if in.FreezeRequest != nil {
		const prefix string = ",\"freeze\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FreezeRequest).MarshalTinyJSON(out)
	}
	if in.UpdateAdminsRequest != nil {
		const prefix string = ",\"update_admins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UpdateAdminsRequest).MarshalTinyJSON(out)
	}
	if in.IncreaseAllowance != nil {
		const prefix string = ",\"increase_allowance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IncreaseAllowance).MarshalTinyJSON(out)
	}
	if in.DecreaseAllowance != nil {
		const prefix string = ",\"decrease_allowance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DecreaseAllowance).MarshalTinyJSON(out)
	}
	if in.SetPermissions != nil {
		const prefix string = ",\"set_permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SetPermissions).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ExecuteMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes13(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes13(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes14(in *jlexer.Lexer, out *DecreaseAllowance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		case "amount":
			(out.Amount).UnmarshalTinyJSON(in)
		case "expires":
			tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(in, &out.Expires)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes14(out *jwriter.Writer, in DecreaseAllowance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spender\":"
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(out, in.Expires)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DecreaseAllowance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v DecreaseAllowance) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DecreaseAllowance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes14(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *DecreaseAllowance) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes14(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes15(in *jlexer.Lexer, out *CanExecuteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_execute":
			out.CanExecute = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes15(out *jwriter.Writer, in CanExecuteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"can_execute\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.CanExecute))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CanExecuteResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v CanExecuteResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CanExecuteResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes15(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *CanExecuteResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes15(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes16(in *jlexer.Lexer, out *AllowanceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spender":
			out.Spender = string(in.String())
		case "balance":
			tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes17(in, &out.Balance)
		case "expires":
			tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(in, &out.Expires)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes16(out *jwriter.Writer, in AllowanceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spender\":"
		out.RawString(prefix[1:])
		out.String(string(in.Spender))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes17(out, in.Balance)
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes11(out, in.Expires)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllowanceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllowanceInfo) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllowanceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes16(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllowanceInfo) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes16(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes17(in *jlexer.Lexer, out *NativeBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coins":
			if in.IsNull() {
				in.Skip()
				out.Coins = nil
			} else {
				in.Delim('[')
				if out.Coins == nil {
					if !in.IsDelim(']') {
						out.Coins = make([]types1.Coin, 0, 2)
					} else {
						out.Coins = []types1.Coin{}
					}
				} else {
					out.Coins = (out.Coins)[:0]
				}
				for !in.IsDelim(']') {
					var v7 types1.Coin
					(v7).UnmarshalTinyJSON(in)
					out.Coins = append(out.Coins, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes17(out *jwriter.Writer, in NativeBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coins\":"
		out.RawString(prefix[1:])
		if in.Coins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Coins {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes18(in *jlexer.Lexer, out *AllPermissionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]PermissionInfo, 0, 2)
					} else {
						out.Permissions = []PermissionInfo{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v10 PermissionInfo
					(v10).UnmarshalTinyJSON(in)
					out.Permissions = append(out.Permissions, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes18(out *jwriter.Writer, in AllPermissionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix[1:])
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Permissions {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllPermissionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllPermissionsResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllPermissionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes18(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllPermissionsResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes18(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes19(in *jlexer.Lexer, out *AllAllowancesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowances":
			if in.IsNull() {
				in.Skip()
				out.Allowances = nil
			} else {
				in.Delim('[')
				if out.Allowances == nil {
					if !in.IsDelim(']') {
						out.Allowances = make([]AllowanceInfo, 0, 0)
					} else {
						out.Allowances = []AllowanceInfo{}
					}
				} else {
					out.Allowances = (out.Allowances)[:0]
				}
				for !in.IsDelim(']') {
					var v13 AllowanceInfo
					(v13).UnmarshalTinyJSON(in)
					out.Allowances = append(out.Allowances, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes19(out *jwriter.Writer, in AllAllowancesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allowances\":"
		out.RawString(prefix[1:])
		if in.Allowances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Allowances {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllAllowancesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AllAllowancesResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllAllowancesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes19(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AllAllowancesResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes19(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes20(in *jlexer.Lexer, out *AdminListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]string, 0, 4)
					} else {
						out.Admins = []string{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Admins = append(out.Admins, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mutable":
			out.Mutable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes20(out *jwriter.Writer, in AdminListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admins\":"
		out.RawString(prefix[1:])
		if in.Admins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Admins {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mutable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AdminListResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes20(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AdminListResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1SubkeysSrcTypes20(l, v)
}
