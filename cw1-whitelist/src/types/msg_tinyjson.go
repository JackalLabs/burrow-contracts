// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	types "github.com/CosmWasm/cosmwasm-go/std/types"
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes(in *jlexer.Lexer, out *UpdateAdminsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]string, 0, 4)
					} else {
						out.Admins = []string{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Admins = append(out.Admins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes(out *jwriter.Writer, in UpdateAdminsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Admins) != 0 {
		const prefix string = ",\"admins\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Admins {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateAdminsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UpdateAdminsRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateAdminsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UpdateAdminsRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes1(in *jlexer.Lexer, out *QueryMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_list":
			if in.IsNull() {
				in.Skip()
				out.QueryAdminListRequest = nil
			} else {
				if out.QueryAdminListRequest == nil {
					out.QueryAdminListRequest = new(QueryAdminListRequest)
				}
				(*out.QueryAdminListRequest).UnmarshalTinyJSON(in)
			}
		case "can_execute":
			if in.IsNull() {
				in.Skip()
				out.QueryCanExecuteRequest = nil
			} else {
				if out.QueryCanExecuteRequest == nil {
					out.QueryCanExecuteRequest = new(QueryCanExecuteRequest)
				}
				(*out.QueryCanExecuteRequest).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes1(out *jwriter.Writer, in QueryMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.QueryAdminListRequest != nil {
		const prefix string = ",\"admin_list\":"
		first = false
		out.RawString(prefix[1:])
		(*in.QueryAdminListRequest).MarshalTinyJSON(out)
	}
	if in.QueryCanExecuteRequest != nil {
		const prefix string = ",\"can_execute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QueryCanExecuteRequest).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes1(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes2(in *jlexer.Lexer, out *QueryCanExecuteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender":
			out.Sender = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes2(out *jwriter.Writer, in QueryCanExecuteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sender != "" {
		const prefix string = ",\"sender\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Sender))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryCanExecuteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryCanExecuteRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryCanExecuteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryCanExecuteRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes2(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes3(in *jlexer.Lexer, out *QueryAdminListRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes3(out *jwriter.Writer, in QueryAdminListRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryAdminListRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v QueryAdminListRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryAdminListRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *QueryAdminListRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes3(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes4(in *jlexer.Lexer, out *MigrateMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes4(out *jwriter.Writer, in MigrateMsg) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MigrateMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v MigrateMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MigrateMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *MigrateMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes4(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes5(in *jlexer.Lexer, out *InitMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]string, 0, 4)
					} else {
						out.Admins = []string{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Admins = append(out.Admins, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mutable":
			out.Mutable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes5(out *jwriter.Writer, in InitMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admins\":"
		out.RawString(prefix[1:])
		if in.Admins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Admins {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mutable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v InitMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *InitMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes5(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes6(in *jlexer.Lexer, out *FreezeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes6(out *jwriter.Writer, in FreezeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FreezeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v FreezeRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FreezeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *FreezeRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes6(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes7(in *jlexer.Lexer, out *ExecuteRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgs":
			if in.IsNull() {
				in.Skip()
				out.Msgs = nil
			} else {
				in.Delim('[')
				if out.Msgs == nil {
					if !in.IsDelim(']') {
						out.Msgs = make([]types.CosmosMsg, 0, 0)
					} else {
						out.Msgs = []types.CosmosMsg{}
					}
				} else {
					out.Msgs = (out.Msgs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 types.CosmosMsg
					(v7).UnmarshalTinyJSON(in)
					out.Msgs = append(out.Msgs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes7(out *jwriter.Writer, in ExecuteRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Msgs) != 0 {
		const prefix string = ",\"msgs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v8, v9 := range in.Msgs {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ExecuteRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ExecuteRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes7(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes8(in *jlexer.Lexer, out *ExecuteMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execute":
			if in.IsNull() {
				in.Skip()
				out.ExecuteRequest = nil
			} else {
				if out.ExecuteRequest == nil {
					out.ExecuteRequest = new(ExecuteRequest)
				}
				(*out.ExecuteRequest).UnmarshalTinyJSON(in)
			}
		case "freeze":
			if in.IsNull() {
				in.Skip()
				out.FreezeRequest = nil
			} else {
				if out.FreezeRequest == nil {
					out.FreezeRequest = new(FreezeRequest)
				}
				(*out.FreezeRequest).UnmarshalTinyJSON(in)
			}
		case "update_admins":
			if in.IsNull() {
				in.Skip()
				out.UpdateAdminsRequest = nil
			} else {
				if out.UpdateAdminsRequest == nil {
					out.UpdateAdminsRequest = new(UpdateAdminsRequest)
				}
				(*out.UpdateAdminsRequest).UnmarshalTinyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes8(out *jwriter.Writer, in ExecuteMsg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ExecuteRequest != nil {
		const prefix string = ",\"execute\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ExecuteRequest).MarshalTinyJSON(out)
	}
	if in.FreezeRequest != nil {
		const prefix string = ",\"freeze\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FreezeRequest).MarshalTinyJSON(out)
	}
	if in.UpdateAdminsRequest != nil {
		const prefix string = ",\"update_admins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UpdateAdminsRequest).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ExecuteMsg) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ExecuteMsg) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes8(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes9(in *jlexer.Lexer, out *CanExecuteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_execute":
			out.CanExecute = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes9(out *jwriter.Writer, in CanExecuteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"can_execute\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.CanExecute))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CanExecuteResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v CanExecuteResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CanExecuteResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *CanExecuteResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes9(l, v)
}
func tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes10(in *jlexer.Lexer, out *AdminListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admins":
			if in.IsNull() {
				in.Skip()
				out.Admins = nil
			} else {
				in.Delim('[')
				if out.Admins == nil {
					if !in.IsDelim(']') {
						out.Admins = make([]string, 0, 4)
					} else {
						out.Admins = []string{}
					}
				} else {
					out.Admins = (out.Admins)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Admins = append(out.Admins, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mutable":
			out.Mutable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes10(out *jwriter.Writer, in AdminListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admins\":"
		out.RawString(prefix[1:])
		if in.Admins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Admins {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mutable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mutable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdminListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AdminListResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonF5cd6cf9EncodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdminListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AdminListResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonF5cd6cf9DecodeGithubComJackalLabsBurrowContractsCw1WhitelistSrcTypes10(l, v)
}
